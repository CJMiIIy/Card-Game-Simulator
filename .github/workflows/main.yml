name: Test, Build, and Release CGS
on:
  push:
    paths:
    - 'Assets/**'
    - 'Packages/**'
    - 'ProjectSettings/**'
  release:
    types:
    - published
  workflow_dispatch:
    inputs:
      mode:
        description: 'check OR release (platform)'
        required: true
        default: 'check'


jobs:

  tests:
    name: Test Code Quality
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2
        with:
          lfs: true
      - name: Cache Library
        uses: actions/cache@v2
        with:
          path: Library
          key: Library
      - name: Run Unit Tests
        uses: game-ci/unity-test-runner@v2
        env:
          UNITY_EMAIL: ${{ secrets.UNITY_EMAIL }}
          UNITY_PASSWORD: ${{ secrets.UNITY_PASSWORD }}
          UNITY_SERIAL: ${{ secrets.UNITY_SERIAL }}
        with:
          githubToken: ${{ secrets.GITHUB_TOKEN }}
      - name: Write to Changelog
        if: github.event.action == 'published'
        env:
          RELEASE_NOTES: ${{ github.event.release.body }}
        run: echo "$RELEASE_NOTES" > fastlane/metadata/android/en-US/changelogs/default.txt
      - name: Auto-Commit Changelog
        if: github.event.action == 'published'
        uses: stefanzweifel/git-auto-commit-action@v4
        with:
          branch: main
          file_pattern: fastlane/metadata/android/en-US/changelogs/*
          commit_message: Update Changelog

  buildWithLinux:
    name: Build for ${{ matrix.targetPlatform }}
    runs-on: ubuntu-latest
    needs: tests
    strategy:
      fail-fast: false
      matrix:
        targetPlatform:
          - Android
          - iOS
          - StandaloneOSX
          - StandaloneLinux64
          - WebGL
    steps:
      - name: Free Disk Space for Android
        if: matrix.targetPlatform == 'Android'
        run: |
          df -h
          sudo swapoff -a
          sudo rm -f /swapfile
          sudo rm -rf /usr/share/dotnet
          sudo rm -rf /opt/ghc
          sudo rm -rf "/usr/local/share/boost"
          sudo rm -rf "$AGENT_TOOLSDIRECTORY"
          sudo apt clean
          docker rmi $(docker image ls -aq)
          df -h
      - name: Checkout Repository
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
          lfs: true
      - uses: actions/cache@v2
        with:
          path: Library
          key: Library-${{ matrix.targetPlatform }}
          restore-keys: Library-
      - name: Build Unity Project
        uses: game-ci/unity-builder@v2
        env:
          UNITY_EMAIL: ${{ secrets.UNITY_EMAIL }}
          UNITY_PASSWORD: ${{ secrets.UNITY_PASSWORD }}
          UNITY_SERIAL: ${{ secrets.UNITY_SERIAL }}
        with:
          targetPlatform: ${{ matrix.targetPlatform }}
          buildMethod: Cgs.Editor.BuildCgs.BuildOptions
          androidAppBundle: true
          androidKeystoreName: finoldigital.keystore
          androidKeystoreBase64: ${{ secrets.ANDROID_KEYSTORE_BASE64 }}
          androidKeystorePass: ${{ secrets.ANDROID_KEYSTORE_PASS }}
          androidKeyaliasName: ${{ secrets.ANDROID_KEYALIAS_NAME }}
          androidKeyaliasPass: ${{ secrets.ANDROID_KEYALIAS_PASS }}
      - name: Upload Build
        uses: actions/upload-artifact@v2
        if: github.event.action == 'published' || contains(github.event.inputs.mode, 'release')
        with:
          name: cgs-${{ matrix.targetPlatform }}
          path: build/${{ matrix.targetPlatform }}
      - name: Upload ${{ matrix.targetPlatform }} to GitHub Release
        uses: svenstaro/upload-release-action@v2
        if: github.event.action == 'published' && matrix.targetPlatform == 'StandaloneLinux64'
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          asset_name: cgs-${{ matrix.targetPlatform }}
          file: build/${{ matrix.targetPlatform }}
          tag: ${{ github.ref }}

  buildWithWindows:
    name: Build for ${{ matrix.targetPlatform }}
    runs-on: windows-latest
    needs: tests
# TODO: Use self-hosted runner with access to enough memory so that builds won't fail
    if: false
    strategy:
      fail-fast: false
      matrix:
        targetPlatform:
          - StandaloneWindows
          - StandaloneWindows64
          - WSAPlayer
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2
        with:
          lfs: true
# TODO: Get tag and pass it as the version to be applied
      - name: Setup Unity
        id: setup-unity
        uses: kuler90/setup-unity@v1
      - name: Activate Unity
        uses: kuler90/activate-unity@v1
        with:
          unity-username: ${{ secrets.UNITY_EMAIL }}
          unity-password: ${{ secrets.UNITY_PASSWORD }}
          unity-serial: ${{ secrets.UNITY_SERIAL }}
      - name: Build Unity
        uses: kuler90/build-unity@v1
        with:
          build-target: ${{ matrix.targetPlatform }}
          build-method: Cgs.Editor.BuildCgs.Build${{ matrix.targetPlatform }}
      - name: Upload Build
        uses: actions/upload-artifact@v2
        if: github.event.action == 'published' || contains(github.event.inputs.mode, 'release')
        with:
          name: cgs-${{ matrix.targetPlatform }}
          path: build/${{ matrix.targetPlatform }}
      - name: Upload ${{ matrix.targetPlatform }} to GitHub Release
        uses: svenstaro/upload-release-action@v2
        if: github.event.action == 'published' && matrix.targetPlatform != 'WSAPlayer'
        with:
          repo_token: ${{ secrets.CGS_PAT }}
          asset_name: cgs-${{ matrix.targetPlatform }}
          file: build/${{ matrix.targetPlatform }}
          tag: ${{ github.ref }}

  releaseToGooglePlay:
    name: Release to the Google Play Store
    runs-on: ubuntu-latest
    needs: buildWithLinux
    if: github.event.action == 'published' || (contains(github.event.inputs.mode, 'release') && contains(github.event.inputs.mode, 'android'))
    env:
      GOOGLE_PLAY_KEY_FILE: ${{ secrets.GOOGLE_PLAY_KEY_FILE }}
      GOOGLE_PLAY_KEY_FILE_PATH: ${{ format('{0}/fastlane/api-finoldigital.json', github.workspace) }}
      ANDROID_BUILD_FILE_PATH: ${{ format('{0}/build/Android/Android.aab', github.workspace) }}
      ANDROID_PACKAGE_NAME: com.finoldigital.cardgamesim
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2
      - name: Download Android Artifact
        uses: actions/download-artifact@v2
        with:
          name: cgs-Android
          path: build/Android
      - name: Add Authentication
        run: echo "$GOOGLE_PLAY_KEY_FILE" > $GOOGLE_PLAY_KEY_FILE_PATH
      - name: Install Fastlane
        run: bundle install
      - name: Upload to Google Play
        uses: maierj/fastlane-action@v2.0.0
        with:
          lane: 'android playprod'

  releaseToAppStore:
    name: Release to the App Store
    runs-on: macos-latest
    needs: buildWithLinux
    if: github.event.action == 'published' || (contains(github.event.inputs.mode, 'release') && contains(github.event.inputs.mode, 'ios'))
    env:
      APPLE_CONNECT_EMAIL: ${{ secrets.APPLE_CONNECT_EMAIL }}
      APPLE_DEVELOPER_EMAIL: ${{ secrets.APPLE_DEVELOPER_EMAIL }}
      APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
      APPLE_TEAM_NAME: ${{ secrets.APPLE_TEAM_NAME }}
      MATCH_PASSWORD: ${{ secrets.MATCH_PASSWORD }}
      MATCH_PERSONAL_ACCESS_TOKEN: ${{ secrets.MATCH_PERSONAL_ACCESS_TOKEN }}
      MATCH_URL: ${{ secrets.MATCH_URL }}
      APPSTORE_KEY_ID: ${{ secrets.APPSTORE_KEY_ID }}
      APPSTORE_ISSUER_ID: ${{ secrets.APPSTORE_ISSUER_ID }}
      APPSTORE_P8: ${{ secrets. APPSTORE_P8 }}
      APPSTORE_P8_PATH: ${{ format('{0}/fastlane/p8.json', github.workspace) }}
      IOS_APP_ID: com.finoldigital.CardGameSim
      IOS_BUILD_PATH: ${{ format('{0}/build/iOS', github.workspace) }}
      PROJECT_NAME: Card Game Simulator
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2
      - name: Download iOS Artifact
        uses: actions/download-artifact@v2
        with:
          name: cgs-iOS
          path: build/iOS
      - name: Fix File Permissions, Code-Sign, and Get Release Notes
        id: bash
        run: |
          find $IOS_BUILD_PATH -type f -name "**.sh" -exec chmod +x {} \;
          echo "$APPSTORE_P8" > $APPSTORE_P8_PATH
          export RELEASE_NOTES=$(cat fastlane/metadata/android/en-US/changelogs/default.txt)
          echo "::set-output name=RELEASE_NOTES::$RELEASE_NOTES"
      - name: Install Fastlane
        run: bundle install
      - name: Upload to the App Store
        uses: maierj/fastlane-action@v2.0.0
        env:
          RELEASE_NOTES: ${{ steps.bash.outputs.RELEASE_NOTES }}
        with:
          lane: 'ios release'

  releaseToMacAppStore:
    name: Release to the Mac App Store
    runs-on: macos-latest
    needs: buildWithLinux
    if: github.event.action == 'published' || (contains(github.event.inputs.mode, 'release') && contains(github.event.inputs.mode, 'mac'))
    env:
      APPLE_CONNECT_EMAIL: ${{ secrets.APPLE_CONNECT_EMAIL }}
      APPLE_DEVELOPER_EMAIL: ${{ secrets.APPLE_DEVELOPER_EMAIL }}
      APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
      APPLE_TEAM_NAME: ${{ secrets.APPLE_TEAM_NAME }}
      MAC_APPLICATION_CERTIFICATE: ${{ secrets.MAC_APPLICATION_CERTIFICATE }}
      MAC_APPLICATION_PASSWORD: ${{ secrets.MAC_APPLICATION_PASSWORD }}
      MAC_INSTALLER_CERTIFICATE: ${{ secrets.MAC_INSTALLER_CERTIFICATE }}
      MAC_INSTALLER_PASSWORD: ${{ secrets.MAC_INSTALLER_PASSWORD }}
      APPSTORE_KEY_ID: ${{ secrets.APPSTORE_KEY_ID }}
      APPSTORE_ISSUER_ID: ${{ secrets.APPSTORE_ISSUER_ID }}
      APPSTORE_P8: ${{ secrets. APPSTORE_P8 }}
      APPSTORE_P8_PATH: ${{ format('{0}/fastlane/p8.json', github.workspace) }}
      MAC_APP_ID: com.finoldigital.CardGameSimulator
      MAC_BUILD_PATH: ${{ format('{0}/build/StandaloneOSX', github.workspace) }}
      PROJECT_NAME: Card Game Simulator
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2
      - name: Download StandaloneOSX Artifact
        uses: actions/download-artifact@v2
        with:
          name: cgs-StandaloneOSX
          path: build/StandaloneOSX
      - name: Install Fastlane
        run: bundle install
      - name: Fix version for StandaloneOSX
        uses: maierj/fastlane-action@v2.0.0
        with:
          lane: 'fixversion'
      - name: Fix File Permissions, Code-Sign, and Get Release Notes
        id: bash
        run: |
          find $MAC_BUILD_PATH -type f -name "**.sh" -exec chmod +x {} \;
          chmod +x fastlane/sign-osx-build.sh
          ./fastlane/sign-osx-build.sh
          echo "$APPSTORE_P8" > $APPSTORE_P8_PATH
          export RELEASE_NOTES=$(cat fastlane/metadata/android/en-US/changelogs/default.txt)
          echo "::set-output name=RELEASE_NOTES::$RELEASE_NOTES"
      - name: Upload to the Mac App Store
        uses: maierj/fastlane-action@v2.0.0
        env:
          RELEASE_NOTES: ${{ steps.bash.outputs.RELEASE_NOTES }}
        with:
          lane: 'mac macupload'

  releaseToGitHubPages:
    name: Release to GitHub Pages
    runs-on: ubuntu-latest
    needs: buildWithLinux
    if: github.event.action == 'published' || (contains(github.event.inputs.mode, 'release') && contains(github.event.inputs.mode, 'web'))
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2
      - name: Download WebGL Artifact
        uses: actions/download-artifact@v2
        with:
          name: cgs-WebGL
          path: build/WebGL
      - name: Copy the WebGL build artifacts to the GitHub Pages directory
        env:
          WEBGL_BUILD_PATH: ${{ format('{0}/build/WebGL', github.workspace) }}
          WEBGL_PAGES_PATH: ${{ format('{0}/docs/WebGL', github.workspace) }}
        run: find $WEBGL_BUILD_PATH -type f -name "**WebGL.*" -exec cp {} $WEBGL_PAGES_PATH \;
      - name: Deploy to GitHub Pages
        uses: stefanzweifel/git-auto-commit-action@v4
        with:
          branch: main
          file_pattern: docs/WebGL/*
          commit_message: Deploy to GitHub Pages

  releaseToMicrosoftStore:
    name: Release to the Microsoft Store
    runs-on: windows-latest
    needs: buildWithWindows
    if: github.event.action == 'published' || (contains(github.event.inputs.mode, 'release') && contains(github.event.inputs.mode, 'windows'))
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2
      - name: Download WSAPlayer Artifact
        uses: actions/download-artifact@v2
        with:
          name: cgs-WSAPlayer
          path: build/WSAPlayer
      - name: Setup MSBuild.exe
        uses: microsoft/setup-msbuild@v1.0.2
      - name: Restore the Wpf application to populate the obj folder
        run: msbuild $env:SolutionPath /t:Restore /p:Configuration=$env:Configuration /p:RuntimeIdentifier=$env:RuntimeIdentifier
        env:
          SolutionPath: build\WSAPlayer\Card Game Simulator.sln
          Configuration: Master
          RuntimeIdentifier: win-x64
      - name: Create .appxupload
        run: msbuild $env:SolutionPath /p:Configuration=$env:Configuration /p:Platform=$env:TargetPlatform /p:UapAppxPackageBuildMode=$env:BuildMode /p:AppxBundle=$env:AppxBundle
        env:
          SolutionPath: build\WSAPlayer\Card Game Simulator.sln
          Configuration: Master
          TargetPlatform: x64
          BuildMode: StoreUpload
          AppxBundle: Always
# TODO: https://docs.microsoft.com/en-us/windows/uwp/monetize/create-and-manage-submissions-using-windows-store-services#prerequisites
# TODO: https://github.com/microsoft/StoreBroker/blob/master/Documentation/SETUP.md
    
